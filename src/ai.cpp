#include "ai.h"

#include "board.h"
#include "node.h"

static constexpr int kForesightStepCount = 2;

AI::AI(Board* board)
    :board_{ board }, 
    board_evaluator_{ board_ }
{
}

/*

# Описание искусственного интеллекта

ИИ выбирает такой ход, чтобы через N ходов* набор фигур ИИ был максимально
близко к целевым позициям**. Для этого создаем все варианты будущего 
на N ходов вперед. При этом предполагается, что человек будет совершать ходы,
чтобы набор фигур ИИ оказался максимально далеко от целевых позиций.
Для определения близости набора фигур ИИ к целевым позициям используем 
"венгерский" алгоритм.

* в моем случае N = 3, чтобы ИИ не сильно долго думал
** целевые позиции - это позиции фигур противника в начале игры.

# Венгерский алгоритм

В качестве вершин биграфа выступают фигуры ИИ и целевые позиции.
В качестве ребер графа берем количество шагов от фигуры ИИ до целевой позиции.
Считаем, что фигуре дойти до целевой позиции ничего не мешает, 
как если бы на доске была только одна эта фигура.

# Примечание

При выборе лучшего варианта будущего для ИИ, можно было бы учитывать 
еще и позицию фигур Человека в будущем, но компьютер и так долго думает.

*/

AI::MoveConst AI::GetMove()
{
    Node root = Node{ board_, &board_evaluator_, kForesightStepCount };
    return root.GetMove();
}